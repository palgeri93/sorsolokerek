
import io
import os
import time
import random
import base64
import wave
from typing import List, Optional

import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import streamlit.components.v1 as components

st.set_page_config(page_title="Sorsol√≥ker√©k ‚Äì Excel munkalapokkal", layout="centered")
st.title("üé° Sorsol√≥ker√©k ‚Äì Excelb≈ël, munkalapok szerint")

st.write(
    "T√∂lts fel egy **.xlsx** f√°jlt t√∂bb munkalappal. "
    "A gombok **pontosan** a munkalapok nev√©t viselik; a megnyomott gombnak megfelel≈ë list√°b√≥l sorsol."
)

# ---------- Hang gener√°l√°s (WAV) ----------
def _tone_wav_bytes(freq: float, duration_s: float, volume: float = 0.2, sr: int = 44100) -> bytes:
    t = np.linspace(0, duration_s, int(sr * duration_s), False)
    samples = (np.sin(2 * np.pi * freq * t) * (32767 * volume)).astype(np.int16)
    buf = io.BytesIO()
    with wave.open(buf, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(2)  # 16-bit
        wf.setframerate(sr)
        wf.writeframes(samples.tobytes())
    return buf.getvalue()

# r√∂vid "p√∂rg√©s" hang (loop-olhat√≥), √©s hosszabb "ding" nyer√©skor
SPIN_WAV = _tone_wav_bytes(freq=520, duration_s=0.12, volume=0.15)
WIN_WAV  = _tone_wav_bytes(freq=880, duration_s=0.35, volume=0.25)

def play_audio_bytes(sound_bytes: bytes, loop: bool = False):
    """Be√°gyazott <audio> HTML autoplay-jel; a visszaadott komponens azonnal lej√°tszik a kattint√°s ut√°n."""
    b64 = base64.b64encode(sound_bytes).decode('ascii')
    loop_attr = " loop" if loop else ""
    html = f"""
    <audio autoplay{loop_attr} style="display:none">
        <source src="data:audio/wav;base64,{b64}" type="audio/wav">
    </audio>
    """
    components.html(html, height=0)

# ---------- Excel seg√©df√ºggv√©nyek ----------
def make_sample_workbook_bytes() -> bytes:
    """Minta Excel f√°jl t√∂bb munkalappal, az egyik lapon s√∫lyokkal."""
    df_a = pd.DataFrame({"N√©v": ["Anna","Bence","Csilla","D√°vid","Emese","Feri"]})
    df_b = pd.DataFrame({
        "N√©v": ["Gabi","Hanna","Ivett","J√≥zsef","Kata","L√°szl√≥"],
        "S√∫ly": [1, 2, 1, 3, 1, 1],  # p√©ldas√∫lyok
    })
    df_c = pd.DataFrame({"N√©v": ["M√°t√©","N√≥ra","Ol√≠via","P√©ter","R√©ka","S√°ra"]})
    df_d = pd.DataFrame({"N√©v": ["Tam√°s","Ubul","Vera","Zita"]})
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        df_a.to_excel(writer, sheet_name="Oszt√°ly A", index=False)
        df_b.to_excel(writer, sheet_name="Oszt√°ly B", index=False)
        df_c.to_excel(writer, sheet_name="Oszt√°ly C", index=False)
        df_d.to_excel(writer, sheet_name="Oszt√°ly D", index=False)
    buf.seek(0)
    return buf.read()

def read_sheet_names(xls_bytes: bytes) -> List[str]:
    xls = pd.ExcelFile(io.BytesIO(xls_bytes))
    return xls.sheet_names

def read_sheet_dataframe(xls_bytes: bytes, sheet_name: str) -> pd.DataFrame:
    """Beolvassa az eg√©sz munkalapot; 'N√©v' oszlop k√∂telez≈ë (ha nincs, az els≈ë oszlopot tekinti n√©vnek).
    Opcion√°lis 'S√∫ly' / 'Weight' oszlopot is kezeli."""
    df = pd.read_excel(io.BytesIO(xls_bytes), sheet_name=sheet_name)
    # N√©v oszlop
    name_candidates = ["N√©v","Nev","n√©v","name","Name"]
    name_col = next((c for c in name_candidates if c in df.columns), df.columns[0])
    df = df.rename(columns={name_col: "N√©v"})
    # S√∫ly oszlop
    weight_col = next((c for c in ["S√∫ly","s√∫ly","suly","Weight","weight"] if c in df.columns), None)
    if weight_col is not None:
        df = df.rename(columns={weight_col: "S√∫ly"})
        df["S√∫ly"] = pd.to_numeric(df["S√∫ly"], errors="coerce").fillna(1.0).clip(lower=0.0)
    else:
        df["S√∫ly"] = 1.0

    # tiszt√≠t√°s
    df["N√©v"] = df["N√©v"].astype(str).str.strip()
    df = df.replace({"N√©v": {"": pd.NA}}).dropna(subset=["N√©v"]).drop_duplicates(subset=["N√©v"]).reset_index(drop=True)
    return df[["N√©v","S√∫ly"]]

# ---------- Ker√©k rajzol√°s/anim√°ci√≥ ----------
def draw_wheel(names: List[str], startangle: float = 0.0, highlight_index: Optional[int] = None):
    n = len(names)
    if n == 0:
        st.warning("Nincsenek nevek ezen a munkalapon.")
        return

    sizes = [1] * n  # egyenl≈ë szeletek a megjelen√≠t√©shez (a h√∫z√°s s√∫lyozott lehet k√ºl√∂n)
    fig, ax = plt.subplots(figsize=(6, 6))
    wedges, _ = ax.pie(
        sizes,
        labels=names,
        startangle=startangle,
        counterclock=True,
        wedgeprops={"linewidth": 1},
        textprops={"fontsize": 10},
    )

    if highlight_index is not None and 0 <= highlight_index < n:
        wedges[highlight_index].set_linewidth(3)

    # Mutat√≥ (fel√ºl, 90 fokn√°l)
    ax.annotate("", xy=(0, 1.15), xytext=(0, 0.9), arrowprops=dict(arrowstyle="-|>", lw=2), ha="center")
    ax.set_aspect("equal")
    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)

def spin_animation(names: List[str], target_index: int, duration_s: float = 3.0, turns: int = 5):
    n = len(names)
    deg = 360.0 / n
    final_startangle = 90.0 - (target_index * deg + deg / 2.0)
    total_rotation = final_startangle + 360.0 * turns

    frames = max(int(duration_s * 30), 30)  # kb. 30 FPS
    sleep_dt = duration_s / frames
    placeholder = st.empty()

    for f in range(frames):
        t = (f + 1) / frames
        ease = 1 - (1 - t) ** 3  # cubic ease-out
        angle = ease * total_rotation
        with placeholder.container():
            draw_wheel(names, startangle=angle)
        time.sleep(sleep_dt)

    with placeholder.container():
        draw_wheel(names, startangle=total_rotation, highlight_index=target_index)

def weighted_choice(names: List[str], weights: List[float]) -> int:
    w = np.array(weights, dtype=float)
    w = np.clip(w, 0, None)
    if w.sum() <= 0:
        return random.randrange(len(names))
    probs = w / w.sum()
    return int(np.random.choice(len(names), p=probs))

# ---------- Oldals√°v: forr√°s √©s be√°ll√≠t√°sok ----------
with st.sidebar:
    st.header("Forr√°sf√°jl")
    source = st.radio("V√°laszd ki a forr√°st:", ["Felt√∂lt√∂tt Excel", "Mintaf√°jl"], index=0, horizontal=True)
    xls_bytes = None

    if source == "Felt√∂lt√∂tt Excel":
        uploaded = st.file_uploader("Excel felt√∂lt√©se (.xlsx)", type=["xlsx"])
        if uploaded is not None:
            xls_bytes = uploaded.read()
        else:
            default_path = "/mnt/data/sample_names.xlsx"
            if os.path.exists(default_path):
                with open(default_path, "rb") as f:
                    xls_bytes = f.read()
                st.caption("Helyi f√°jl √©szlelve: /mnt/data/sample_names.xlsx")
            else:
                st.info("T√∂lts fel egy Excel f√°jlt, vagy v√°laszd a Mintaf√°jlt!")
    else:
        xls_bytes = make_sample_workbook_bytes()
        st.caption("Mintaf√°jl bet√∂ltve: Oszt√°ly A / B / C / D (B lapon 'S√∫ly').")

    st.header("Be√°ll√≠t√°sok")
    remove_winner = st.checkbox("Nyertes elt√°vol√≠t√°sa ebb≈ël a k√∂rb≈ël", value=True)
    use_weights = st.checkbox("S√∫lyozott sorsol√°s (S√∫ly/Weight oszlop)", value=True)
    duration = st.slider("P√∂rget√©s hossza (mp)", min_value=1.0, max_value=8.0, value=3.0, step=0.5)
    turns = st.slider("Teljes k√∂r√∂k sz√°ma", min_value=3, max_value=10, value=5, step=1)

    st.header("Hang effektek")
    audio_enabled = st.toggle("Hang enged√©lyez√©se", value=True)
    audio_spin_loop = st.checkbox("P√∂rg√©s k√∂zben loop", value=False, help="R√∂vid 'b√∫g√≥' hang ism√©tl√©se p√∂rg√©s alatt.")
    audio_win_ding = st.checkbox("Ding a nyertesn√©l", value=True)

if xls_bytes is None:
    st.stop()

# ---------- Munkalapok ----------
sheet_names = read_sheet_names(xls_bytes)
if len(sheet_names) == 0:
    st.error("A f√°jl nem tartalmaz munkalapokat.")
    st.stop()

st.subheader("Munkalapok")
chosen = st.session_state.get("chosen_sheet")

cols_per_row = 4
rows = (len(sheet_names) + cols_per_row - 1) // cols_per_row
for r in range(rows):
    cols = st.columns(cols_per_row)
    for c in range(cols_per_row):
        i = r * cols_per_row + c
        if i >= len(sheet_names):
            break
        sheet = sheet_names[i]
        if cols[c].button(sheet, key=f"btn_{sheet}"):
            st.session_state["chosen_sheet"] = sheet
            chosen = sheet

if not chosen and len(sheet_names) > 0:
    chosen = sheet_names[0]
    st.session_state["chosen_sheet"] = chosen

st.success(f"Kiv√°lasztott munkalap: **{chosen}**")

# ---------- N√©vlista √©s p√∂rget√©s ----------
df_sheet = read_sheet_dataframe(xls_bytes, chosen)
names_all = df_sheet["N√©v"].tolist()
weights_all = df_sheet["S√∫ly"].tolist()

if "winners_by_sheet" not in st.session_state:
    st.session_state["winners_by_sheet"] = {}
if chosen not in st.session_state["winners_by_sheet"]:
    st.session_state["winners_by_sheet"][chosen] = []
previous_winners = st.session_state["winners_by_sheet"][chosen]

if "log_by_sheet" not in st.session_state:
    st.session_state["log_by_sheet"] = {}
if chosen not in st.session_state["log_by_sheet"]:
    st.session_state["log_by_sheet"][chosen] = []

# Sz≈±r√©s k√∂r√∂n bel√ºl
if remove_winner and previous_winners:
    filtered = [(n, w) for n, w in zip(names_all, weights_all) if n not in previous_winners]
    names = [n for n, _ in filtered]
    weights = [w for _, w in filtered]
else:
    names = names_all
    weights = weights_all

if len(names) == 0:
    st.warning("Mindenki nyert ebben a k√∂rben. Nyomd meg az **√öj k√∂r ind√≠t√°sa** gombot az al√°bbiakban.")
    names = names_all
    weights = weights_all

with st.expander("N√©vlista (aktu√°lis)", expanded=False):
    st.write(pd.DataFrame({"N√©v": names, "S√∫ly (aktu√°lis)": weights}))

st.divider()
st.subheader("P√∂rget√©s")

col_spin, col_reset, col_clearlog = st.columns([2,1,1])
with col_spin:
    spin = st.button("üéØ P√∂rgesd meg a kereket!", type="primary")
with col_reset:
    reset_round = st.button("üîÑ √öj k√∂r ind√≠t√°sa (csak enn√©l a lapn√°l)")
with col_clearlog:
    clear_log = st.button("üßπ Napl√≥ t√∂rl√©se (csak enn√©l a lapn√°l)")

if reset_round:
    st.session_state["winners_by_sheet"][chosen] = []
    st.success("√öj k√∂r kezdve: a kor√°bbi nyertesek ism√©t r√©szt vesznek.")

if clear_log:
    st.session_state["log_by_sheet"][chosen] = []
    st.success("A nyertes napl√≥ t√∂r√∂lve enn√©l a munkalapn√°l.")

# Hang helyfoglal√≥k (√≠gy tudjuk k√ºl√∂n ind√≠tani/meg√°ll√≠tani a loop-ot)
audio_spin_placeholder = st.empty()
audio_win_placeholder = st.empty()

if spin:
    if len(names) < 1:
        st.error("Nincs el√©rhet≈ë n√©v a sorsol√°shoz.")
    else:
        # Start loop hang
        if audio_enabled and audio_spin_loop:
            with audio_spin_placeholder:
                play_audio_bytes(SPIN_WAV, loop=True)

        # c√©l index kiv√°laszt√°sa (s√∫lyoz√°s opcion√°lis)
        if use_weights and any(w > 0 for w in weights):
            target_index = weighted_choice(names, weights)
        else:
            target_index = random.randrange(len(names))

        spin_animation(names, target_index=target_index, duration_s=duration, turns=turns)

        # Stop loop (= fel√ºl√≠rjuk az √ºres placeholderrel)
        audio_spin_placeholder.empty()

        winner = names[target_index]
        st.markdown(f"## ‚úÖ Nyertes: **{winner}**")

        if audio_enabled and audio_win_ding:
            with audio_win_placeholder:
                play_audio_bytes(WIN_WAV, loop=False)

        if remove_winner and winner not in st.session_state["winners_by_sheet"][chosen]:
            st.session_state["winners_by_sheet"][chosen].append(winner)

        st.session_state["log_by_sheet"][chosen].append({
            "Id≈ëpont": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Munkalap": chosen,
            "Nyertes": winner
        })

# Napl√≥ megjelen√≠t√©s + export
st.divider()
st.subheader("Nyerem√©ny napl√≥")
log_df = pd.DataFrame(st.session_state["log_by_sheet"][chosen], columns=["Id≈ëpont","Munkalap","Nyertes"])
if log_df.empty:
    st.info("M√©g nincs bejegyz√©s.")
else:
    st.dataframe(log_df, use_container_width=True)
    csv = log_df.to_csv(index=False).encode("utf-8")
    st.download_button("Napl√≥ let√∂lt√©se (CSV)", data=csv, file_name=f"nyertes_naplo_{chosen}.csv", mime="text/csv")
